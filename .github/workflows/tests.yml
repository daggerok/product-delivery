name: tests
on:
  push:
env:
  NODE_VERSION: 18.7.0
jobs:
  unit-tests:
    name: java-${{ matrix.java }} unit tests
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v3
        with:
          # 'temurin' 'zulu' 'adopt' 'adopt-hotspot' 'adopt-openj9' 'liberica' 'microsoft'
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.node
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml', '**/package.json', '**/package-lock.json') }}
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: cd $GITHUB_WORKSPACE ; ./mvnw
  integration-tests:
    name: java-${{ matrix.java }} integration tests
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.node
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml', '**/package.json', '**/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: sudo apt install -y httpie
      - run: docker pull mysql:8.0.30
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: |
          docker run -d --rm --name mysql --platform=linux/x86_64 \
            --health-cmd='mysqladmin ping -h 127.0.0.1 -u $MYSQL_USER --password=$MYSQL_PASSWORD || exit 1' \
            --health-start-period=1s --health-retries=1111 --health-interval=1s --health-timeout=5s \
            -e MYSQL_ROOT_PASSWORD=app-password -e MYSQL_DATABASE=app-database \
            -e MYSQL_USER=app-user -e MYSQL_PASSWORD=app-password \
            -p 3306:3306 \
            mysql:8.0.30
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 3 ; echo -n '.' ; done ; sleep 15; echo 'MySQL is ready.'
      - run: npm_config_yes=true npx wait-port 3306
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f app compile spring-boot:start
      - run: npm_config_yes=true npx wait-port 8080
      - run: http --ignore-stdin post :8080/api/v1/delivery budget=123.45 notes="Pick 2 pizzas and deliver to customer"
      - run: http --ignore-stdin  put :8080/api/v1/delivery/1/created
      - run: http --ignore-stdin  put :8080/api/v1/delivery/1/cancelled
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f app spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; docker stop mysql
